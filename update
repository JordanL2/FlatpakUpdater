#!/usr/bin/python3

import argparse
from datetime import *
import http.client
import json
import re
import subprocess
import sys
import yaml


def main(filename, main_module=None, main_source=None, appdata=None):
    print("updating sources in ", filename)
    with open(filename, 'r') as fh:
        config = yaml.load(fh, Loader=yaml.CLoader)

    github_regex = re.compile('https:\/\/github\.com\/([^/]+)/([^/]+)/*')

    for m, module in enumerate(config['modules']):
        if isinstance(module, dict) and 'sources' in module:
            print("module:", module['name'])
            for s, source in enumerate(module['sources']):
                if source['type'] == 'archive' and 'url' in source:
                    match = github_regex.match(source['url'])
                    if match:
                        repo_owner = match[1]
                        repo_name = match[2]

                        last_tag = check_for_new_github(repo_owner, repo_name)
                        new_url = "https://github.com/{}/{}/archive/refs/tags/{}.tar.gz".format(repo_owner, repo_name, last_tag)
                        if new_url != source['url']:
                            print("- new release:", new_url)
                            new_sha = update_sha256(new_url)
                            update_file(filename, ['modules', m, 'sources', s, 'url'], new_url)
                            update_file(filename, ['modules', m, 'sources', s, 'sha256'], new_sha)
                            if appdata is not None and module['name'] == main_module and s == main_source:
                                print("- main module updated, updating {} with new version {}".format(appdata, last_tag))
                                update_release(appdata, last_tag)

def check_for_new_github(repo_owner, repo_name):
    connection, response = get_connection(
        "GET",
        "https://api.github.com/repos/{}/{}/releases".format(repo_owner, repo_name),
        {'Content-type': 'application/json', 'User-Agent': 'Python'})
    body = response.read().decode()
    connection.close()
    result = json.loads(body)
    return result[0]['tag_name']

def update_sha256(url):
    tmpfile = "/tmp/sha256tmpfile"
    download_file(url, tmpfile)

    output = cmd("sha256sum {}".format(tmpfile))
    sha = output.split(' ')[0]
    return sha

def get_connection(method, url, headers=None):
    https_url_regex = re.compile('([^/]+)://([^/]+)(.+)')
    match = https_url_regex.match(url)
    if not match:
        raise Exception("URL is invalid: {}".format(url))
    url_protocol = match[1]
    url_domain = match[2]
    url_path = match[3]

    if url_protocol == 'https':
        connection = http.client.HTTPSConnection(url_domain)
    else:
        raise Exception("Don't recognise protocol {}".format(url_protocol))

    if headers is None:
        headers = {'User-Agent': 'Python'}

    # Test connection for redirect
    connection.request(method, url_path, headers=headers)
    response = connection.getresponse()
    response_headers = dict(response.getheaders())
    if 'Location' in response_headers and response_headers['Location'] != url:
        connection.close()
        return get_connection(method, response_headers['Location'], headers)

    return connection, response

def download_file(url, filename):
    connection, response = get_connection("GET", url)
    with open(filename, "wb") as fh:
        while chunk := response.read(200):
            fh.write(chunk)
    connection.close()

def cmd(command):
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout = result.stdout.decode('utf-8').rstrip("\n")
    stderr = result.stderr.decode('utf-8').rstrip("\n")
    if result.returncode != 0:
        raise Exception("Command returned code {}".format(result.returncode))
    return stdout

def update_file(filename, path, new_value):
    yml_line_regex = re.compile('^( *)((?:- )?)((?:[^ :]+:)?)\s*(.*?)$')
    this_path = []
    with open(filename, 'r') as fh:
        lines = [i.rstrip() for i in fh.readlines()]
        for l, line in enumerate(lines):
            if line == '':
                continue
            match = yml_line_regex.match(line)
            if not match:
                raise Exception("Invalid line: `{}`".format(line))
            i = len(match[1])
            array = match[2] != ''
            key = match[3]
            if len(key) > 0:
                key = key[0:-1]
            value = match[4]

            # Update current path
            while len(this_path) > 0 and this_path[-1][0] > i:
                this_path.pop()
            if len(this_path) > 0 and this_path[-1][0] == i:
                if array:
                    this_path[-1][1] += 1
                    if key:
                        this_path.append([i + 2, key])
                elif key:
                    this_path[-1][1] = key
            if len(this_path) == 0 or this_path[-1][0] < i:
                if array:
                    this_path.append([i, 0])
                if key:
                    if array:
                        this_path.append([i + 2, key])
                    else:
                        this_path.append([i, key])

            # If this is the target path, replace the value
            if [p[1] for p in this_path] == path:
                new_line = ' ' * i
                if array:
                    new_line += '- '
                if key:
                    new_line += "{}: ".format(key)
                new_line += new_value
                lines[l] = new_line

    # Write new version of file
    with open(filename, 'w') as fh:
        for line in lines:
            fh.write("{}\n".format(line))

def update_release(appdata, last_tag):
    date = datetime.now().strftime('%Y-%m-%d')
    command = "sed -i -e\"s/<release version=\\\".\\+\\\" date=\\\".\\+\\\"\\/>/<release version=\\\"{}\\\" date=\\\"{}\\\"\\/>/\" {}".format(last_tag, date, appdata)
    cmd(command)


### ENTRY POINT ###

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='updateflatpak')
    parser.add_argument('manifest', help='YAML Flatpak manifest to update')
    parser.add_argument('--mainmodule', nargs='?', help='main module for application')
    parser.add_argument('--source', nargs='?', type=int, help='zero-indexed index for source of main module that determines app version')
    parser.add_argument('--appdata', nargs='?', help='path of appdata file to update version/date automatically')
    args = parser.parse_args()

    main(args.manifest, args.mainmodule, args.source, args.appdata)
