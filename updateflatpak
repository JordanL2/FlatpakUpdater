#!/usr/bin/python3

import argparse
import datetime
import fcntl
import http.client
import json
import os
import re
import subprocess
import sys
import time
import yaml


def main(args):
    filename = args.manifest
    print("Updating sources in {}...".format(filename))
    with open(filename, 'r') as fh:
        config = yaml.load(fh, Loader=yaml.CLoader)
    appid = config['app-id']

    github_regex = re.compile('https:\/\/github\.com\/([^/]+)/([^/]+)/*')

    version = None

    for m, module in enumerate(config['modules']):
        if isinstance(module, dict) and 'sources' in module:
            print("Module:", module['name'])
            for s, source in enumerate(module['sources']):
                if source['type'] == 'archive' and 'url' in source:
                    match = github_regex.match(source['url'])
                    if match:
                        repo_owner = match[1]
                        repo_name = match[2]

                        last_tag = check_for_new_github(repo_owner, repo_name)
                        new_url = "https://github.com/{}/{}/archive/refs/tags/{}.tar.gz".format(repo_owner, repo_name, last_tag)
                        if new_url != source['url']:
                            print("- New release:", new_url)
                            new_sha = update_sha256(new_url)
                            update_file(filename, ['modules', m, 'sources', s, 'url'], new_url)
                            update_file(filename, ['modules', m, 'sources', s, 'sha256'], new_sha)
                            if args.appdata is not None and module['name'] == args.mainmodule and s == args.source:
                                version = last_tag
                                print("- Main module updated, updating {} with new version {}".format(args.appdata, version))
                                update_release(args.appdata, version)

    if args.repo is not None and version is not None:
        command = "flatpak-builder --repo={}".format(args.repo)
        if args.gpg_sign is not None:
            command += " --gpg-sign={}".format(args.gpg_sign)
        if args.gpg_homedir is not None:
            command += " --gpg-homedir={}".format(args.gpg_homedir)
        command += " --force-clean build {}".format(filename)
        if args.branch is not None:
            command += " --default-branch={}".format(args.branch)
        print("\n======================================")
        print("Building and exporting to repository {}...".format(args.repo))
        cmd(command, sys.stdout, sys.stderr)

    if args.installrepo is not None and version is not None:
        print("\n======================================")
        print("Reinstalling from repo {}...".format(args.installrepo))
        command = "(flatpak --user remove {0}//{1} -y || true) ; flatpak --user install {2} {0}//{1} -y".format(appid, args.branch, args.installrepo)
        cmd(command, sys.stdout, sys.stderr)

    if args.commit and version is not None:
        print("\n======================================")
        print("Committing version {}...".format(version))
        command = "git commit -am'Version {}'".format(version)
        cmd(command, sys.stdout, sys.stderr)

def check_for_new_github(repo_owner, repo_name):
    connection, response = get_connection(
        "GET",
        "https://api.github.com/repos/{}/{}/releases".format(repo_owner, repo_name),
        {'Content-type': 'application/json', 'User-Agent': 'Python'})
    body = response.read().decode()
    connection.close()
    result = json.loads(body)
    return result[0]['tag_name']

def update_sha256(url):
    tmpfile = "/tmp/sha256tmpfile"
    download_file(url, tmpfile)

    output = cmd("sha256sum {}".format(tmpfile))[0]
    sha = output.split(' ')[0]
    return sha

def get_connection(method, url, headers=None):
    https_url_regex = re.compile('([^/]+)://([^/]+)(.+)')
    match = https_url_regex.match(url)
    if not match:
        raise Exception("URL is invalid: {}".format(url))
    url_protocol = match[1]
    url_domain = match[2]
    url_path = match[3]

    if url_protocol == 'https':
        connection = http.client.HTTPSConnection(url_domain)
    else:
        raise Exception("Don't recognise protocol {}".format(url_protocol))

    if headers is None:
        headers = {'User-Agent': 'Python'}

    # Test connection for redirect
    connection.request(method, url_path, headers=headers)
    response = connection.getresponse()
    response_headers = dict(response.getheaders())
    if 'Location' in response_headers and response_headers['Location'] != url:
        connection.close()
        return get_connection(method, response_headers['Location'], headers)

    return connection, response

def download_file(url, filename):
    connection, response = get_connection("GET", url)
    with open(filename, "wb") as fh:
        while chunk := response.read(200):
            fh.write(chunk)
    connection.close()

def set_non_blocking(output):
    fd = output.fileno()
    fl = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

def non_blocking_read(output):
    try:
        return output.readlines()
    except:
        return []

def cmd(command, stdout=None, stderr=None, exit_on_error=True):
    proc = subprocess.Popen(command,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        universal_newlines=True,
        bufsize=1)

    stdout_result = ''
    stderr_result = ''
    result_code = None

    set_non_blocking(proc.stdout)
    set_non_blocking(proc.stderr)

    while True:
        lines = non_blocking_read(proc.stdout)
        for line in lines:
            stdout_result += line
            if stdout is not None:
                print(line, end='', file=stdout)

        lines = non_blocking_read(proc.stderr)
        for line in lines:
            stderr_result += line
            if stderr is not None:
                print(line, end='', file=stderr)

        if result_code is not None:
            break
        result_code = proc.poll()

        # This fixes a weird bug causing output not to be read correctly
        time.sleep(0.000001)

    stdout_result = stdout_result.rstrip("\n")
    stderr_result = stderr_result.rstrip("\n")

    if exit_on_error and result_code != 0:
        print(stderr_result, file=sys.stderr)
        sys.exit(result_code)

    return stdout_result, stderr_result, result_code

def update_file(filename, path, new_value):
    yml_line_regex = re.compile('^( *)((?:- )?)((?:[^ :]+:)?)\s*(.*?)$')
    this_path = []
    with open(filename, 'r') as fh:
        lines = [i.rstrip() for i in fh.readlines()]
        for l, line in enumerate(lines):
            if line == '':
                continue
            match = yml_line_regex.match(line)
            if not match:
                raise Exception("Invalid line: `{}`".format(line))
            i = len(match[1])
            array = match[2] != ''
            key = match[3]
            if len(key) > 0:
                key = key[0:-1]
            value = match[4]

            # Update current path
            while len(this_path) > 0 and this_path[-1][0] > i:
                this_path.pop()
            if len(this_path) > 0 and this_path[-1][0] == i:
                if array:
                    this_path[-1][1] += 1
                    if key:
                        this_path.append([i + 2, key])
                elif key:
                    this_path[-1][1] = key
            if len(this_path) == 0 or this_path[-1][0] < i:
                if array:
                    this_path.append([i, 0])
                if key:
                    if array:
                        this_path.append([i + 2, key])
                    else:
                        this_path.append([i, key])

            # If this is the target path, replace the value
            if [p[1] for p in this_path] == path:
                new_line = ' ' * i
                if array:
                    new_line += '- '
                if key:
                    new_line += "{}: ".format(key)
                new_line += new_value
                lines[l] = new_line

    # Write new version of file
    with open(filename, 'w') as fh:
        for line in lines:
            fh.write("{}\n".format(line))

def update_release(appdata, last_tag):
    date = datetime.datetime.now().strftime('%Y-%m-%d')
    command = "sed -i -e\"s/<release version=\\\".\\+\\\" date=\\\".\\+\\\"\\/>/<release version=\\\"{}\\\" date=\\\"{}\\\"\\/>/\" {}".format(last_tag, date, appdata)
    cmd(command)


### ENTRY POINT ###

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='updateflatpak')
    parser.add_argument('manifest', help='YAML Flatpak manifest to update')
    parser.add_argument('--mainmodule', nargs='?', help='main module for application')
    parser.add_argument('--source', nargs='?', type=int, help='zero-indexed index for source of main module that determines app version')
    parser.add_argument('--appdata', nargs='?', help='path of appdata file to update version/date automatically')
    parser.add_argument('--repo', nargs='?', help='flatpak report to export to')
    parser.add_argument('--gpg-sign', nargs='?', help='key to sign with')
    parser.add_argument('--gpg-homedir', nargs='?', help='gpg home directory')
    parser.add_argument('--branch', nargs='?', help='branch to export as')
    parser.add_argument('--installrepo', nargs='?', help='repo to reinstall app from')
    parser.add_argument('--commit', action='store_true', help='automatically commit (does not push)')
    args = parser.parse_args()

    main(args)
